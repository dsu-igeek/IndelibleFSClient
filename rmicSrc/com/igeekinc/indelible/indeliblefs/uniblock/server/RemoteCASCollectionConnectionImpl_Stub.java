// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.uniblock.server;

public final class RemoteCASCollectionConnectionImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.igeekinc.indelible.indeliblefs.server.RemoteCASCollectionConnection, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean bulkReleaseSegment(com.igeekinc.indelible.oid.CASSegmentID[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction commit()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterID(long)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterTime(long)"),
	new java.rmi.server.Operation("com.igeekinc.util.async.RemoteAsyncCompletionStatus executeAsync(com.igeekinc.util.async.RemoteAsyncCommandBlock[], long)[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer getCASServer()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getEventsForTransaction(com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.CASCollectionID getID()"),
	new java.rmi.server.Operation("long getLastEventID()"),
	new java.rmi.server.Operation("long getLastReplicatedEventID(com.igeekinc.indelible.oid.EntityID, com.igeekinc.indelible.oid.CASCollectionID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor getMetaDataForReplication()"),
	new java.rmi.server.Operation("java.util.HashMap getMetaDataResource(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.EntityID getMoverID()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getTransactionEventsAfterEventID(long, int)"),
	new java.rmi.server.Operation("java.lang.String listMetaDataNames()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator listSegmentIDs()"),
	new java.rmi.server.Operation("boolean releaseSegment(com.igeekinc.indelible.oid.CASSegmentID)"),
	new java.rmi.server.Operation("void repairSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo)"),
	new java.rmi.server.Operation("void replicateMetaDataResource(com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier retrieveCASIdentifier(com.igeekinc.indelible.oid.CASSegmentID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor retrieveSegment(com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo retrieveSegmentInfo(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("void rollback()"),
	new java.rmi.server.Operation("void setMetaDataResource(java.lang.String, java.util.HashMap)"),
	new java.rmi.server.Operation("void startReplicatedTransaction(com.igeekinc.indelible.indeliblefs.uniblock.TransactionCommittedEvent)"),
	new java.rmi.server.Operation("void startTransaction()"),
	new java.rmi.server.Operation("void storeReplicatedSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo storeSegment(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("void storeVersionedSegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor)"),
	new java.rmi.server.Operation("boolean verifySegment(com.igeekinc.indelible.oid.ObjectID, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)")
    };
    
    private static final long interfaceHash = -8690896036000837086L;
    
    // constructors
    public RemoteCASCollectionConnectionImpl_Stub() {
	super();
    }
    public RemoteCASCollectionConnectionImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of bulkReleaseSegment(CASSegmentID[])
    public boolean[] bulkReleaseSegment(com.igeekinc.indelible.oid.CASSegmentID[] $param_arrayOf_CASSegmentID_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_arrayOf_CASSegmentID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    boolean[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (boolean[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of commit()
    public com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction commit()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of eventsAfterID(long)
    public com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterID(long $param_long_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeLong($param_long_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of eventsAfterTime(long)
    public com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator eventsAfterTime(long $param_long_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeLong($param_long_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of executeAsync(RemoteAsyncCommandBlock[], long)
    public com.igeekinc.util.async.RemoteAsyncCompletionStatus[] executeAsync(com.igeekinc.util.async.RemoteAsyncCommandBlock[] $param_arrayOf_RemoteAsyncCommandBlock_1, long $param_long_2)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_arrayOf_RemoteAsyncCommandBlock_1);
		out.writeLong($param_long_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.util.async.RemoteAsyncCompletionStatus[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.util.async.RemoteAsyncCompletionStatus[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getCASServer()
    public com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer getCASServer()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.remote.RemoteCASServer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getEntityAuthentication()
    public com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getEntityAuthentication()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.security.EntityAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getEventsForTransaction(IndelibleFSTransaction)
    public com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getEventsForTransaction(com.igeekinc.indelible.indeliblefs.core.IndelibleFSTransaction $param_IndelibleFSTransaction_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_IndelibleFSTransaction_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getID()
    public com.igeekinc.indelible.oid.CASCollectionID getID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.CASCollectionID $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.CASCollectionID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getLastEventID()
    public long getLastEventID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
	    ref.invoke(call);
	    long $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getLastReplicatedEventID(EntityID, CASCollectionID)
    public long getLastReplicatedEventID(com.igeekinc.indelible.oid.EntityID $param_EntityID_1, com.igeekinc.indelible.oid.CASCollectionID $param_CASCollectionID_2)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_EntityID_1);
		out.writeObject($param_CASCollectionID_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    long $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getMetaDataForReplication()
    public com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor getMetaDataForReplication()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getMetaDataResource(String)
    public java.util.HashMap getMetaDataResource(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    java.util.HashMap $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.util.HashMap) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getMoverID()
    public com.igeekinc.indelible.oid.EntityID getMoverID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 13, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.EntityID $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.EntityID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getTransactionEventsAfterEventID(long, int)
    public com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator getTransactionEventsAfterEventID(long $param_long_1, int $param_int_2)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 14, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeLong($param_long_1);
		out.writeInt($param_int_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.events.RemoteIndelibleEventIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listMetaDataNames()
    public java.lang.String[] listMetaDataNames()
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 15, interfaceHash);
	    ref.invoke(call);
	    java.lang.String[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listSegmentIDs()
    public com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator listSegmentIDs()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 16, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.server.RemoteCASSegmentIDIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of releaseSegment(CASSegmentID)
    public boolean releaseSegment(com.igeekinc.indelible.oid.CASSegmentID $param_CASSegmentID_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 17, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CASSegmentID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    boolean $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of repairSegment(ObjectID, IndelibleVersion, DataVersionInfo)
    public void repairSegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2, com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $param_DataVersionInfo_3)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 18, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_IndelibleVersion_2);
		out.writeObject($param_DataVersionInfo_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of replicateMetaDataResource(CASIDDataDescriptor, CASCollectionEvent)
    public void replicateMetaDataResource(com.igeekinc.indelible.indeliblefs.uniblock.CASIDDataDescriptor $param_CASIDDataDescriptor_1, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent $param_CASCollectionEvent_2)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 19, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CASIDDataDescriptor_1);
		out.writeObject($param_CASCollectionEvent_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveCASIdentifier(CASSegmentID)
    public com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier retrieveCASIdentifier(com.igeekinc.indelible.oid.CASSegmentID $param_CASSegmentID_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 20, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CASSegmentID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveSegment(CASIdentifier)
    public com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor retrieveSegment(com.igeekinc.indelible.indeliblefs.uniblock.CASIdentifier $param_CASIdentifier_1)
	throws com.igeekinc.indelible.indeliblefs.uniblock.exceptions.SegmentNotFound, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 21, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_CASIdentifier_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.uniblock.exceptions.SegmentNotFound e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveSegment(ObjectID)
    public com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 22, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveSegment(ObjectID, IndelibleVersion, RetrieveVersionFlags)
    public com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo retrieveSegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 23, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_IndelibleVersion_2);
		out.writeObject($param_RetrieveVersionFlags_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.DataVersionInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveSegmentInfo(ObjectID, IndelibleVersion, RetrieveVersionFlags)
    public com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo retrieveSegmentInfo(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 24, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_IndelibleVersion_2);
		out.writeObject($param_RetrieveVersionFlags_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.SegmentInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of rollback()
    public void rollback()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 25, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setMetaDataResource(String, HashMap)
    public void setMetaDataResource(java.lang.String $param_String_1, java.util.HashMap $param_HashMap_2)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 26, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_HashMap_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of startReplicatedTransaction(TransactionCommittedEvent)
    public void startReplicatedTransaction(com.igeekinc.indelible.indeliblefs.uniblock.TransactionCommittedEvent $param_TransactionCommittedEvent_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 27, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_TransactionCommittedEvent_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of startTransaction()
    public void startTransaction()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 28, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of storeReplicatedSegment(ObjectID, IndelibleVersion, NetworkDataDescriptor, CASCollectionEvent)
    public void storeReplicatedSegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_3, com.igeekinc.indelible.indeliblefs.uniblock.CASCollectionEvent $param_CASCollectionEvent_4)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 29, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_IndelibleVersion_2);
		out.writeObject($param_NetworkDataDescriptor_3);
		out.writeObject($param_CASCollectionEvent_4);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of storeSegment(NetworkDataDescriptor)
    public com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo storeSegment(com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_1)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 30, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_NetworkDataDescriptor_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.uniblock.CASStoreInfo) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of storeVersionedSegment(ObjectID, NetworkDataDescriptor)
    public void storeVersionedSegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.datamover.NetworkDataDescriptor $param_NetworkDataDescriptor_2)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 31, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_NetworkDataDescriptor_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of verifySegment(ObjectID, IndelibleVersion, RetrieveVersionFlags)
    public boolean verifySegment(com.igeekinc.indelible.oid.ObjectID $param_ObjectID_1, com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_2, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_3)
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 32, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_ObjectID_1);
		out.writeObject($param_IndelibleVersion_2);
		out.writeObject($param_RetrieveVersionFlags_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    boolean $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}

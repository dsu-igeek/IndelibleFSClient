// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleFSServerConnectionImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.igeekinc.indelible.indeliblefs.server.IndelibleFSServerConnectionRemote, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addClientSessionAuthentication(com.igeekinc.indelible.indeliblefs.security.SessionAuthentication)"),
	new java.rmi.server.Operation("void close()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commit()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commitAndSnapshot(java.util.HashMap)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote createVolume(java.util.Properties)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getClientEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getServerEntityAuthentication()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.security.SessionAuthentication getSessionAuthentication()"),
	new java.rmi.server.Operation("boolean inTransaction()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID listVolumes()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote retrieveVolume(com.igeekinc.indelible.oid.IndelibleFSObjectID)"),
	new java.rmi.server.Operation("void rollback()"),
	new java.rmi.server.Operation("void startTransaction()")
    };
    
    private static final long interfaceHash = 6027925610321205441L;
    
    // constructors
    public IndelibleFSServerConnectionImpl_Stub() {
	super();
    }
    public IndelibleFSServerConnectionImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addClientSessionAuthentication(SessionAuthentication)
    public void addClientSessionAuthentication(com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $param_SessionAuthentication_1)
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_SessionAuthentication_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of close()
    public void close()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of commit()
    public com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commit()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of commitAndSnapshot(HashMap)
    public com.igeekinc.indelible.indeliblefs.core.IndelibleVersion commitAndSnapshot(java.util.HashMap $param_HashMap_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_HashMap_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createVolume(Properties)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote createVolume(java.util.Properties $param_Properties_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_Properties_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getClientEntityAuthentication()
    public com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getClientEntityAuthentication()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.security.EntityAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getServerEntityAuthentication()
    public com.igeekinc.indelible.indeliblefs.security.EntityAuthentication getServerEntityAuthentication()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.security.EntityAuthentication $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.security.EntityAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSessionAuthentication()
    public com.igeekinc.indelible.indeliblefs.security.SessionAuthentication getSessionAuthentication()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.security.SessionAuthentication $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.security.SessionAuthentication) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of inTransaction()
    public boolean inTransaction()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
	    ref.invoke(call);
	    boolean $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listVolumes()
    public com.igeekinc.indelible.oid.IndelibleFSObjectID[] listVolumes()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.IndelibleFSObjectID[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.IndelibleFSObjectID[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of retrieveVolume(IndelibleFSObjectID)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote retrieveVolume(com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.VolumeNotFoundException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_IndelibleFSObjectID_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFSVolumeRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.VolumeNotFoundException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of rollback()
    public void rollback()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of startTransaction()
    public void startTransaction()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}

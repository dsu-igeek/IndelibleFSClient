// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package com.igeekinc.indelible.indeliblefs.server;

public final class IndelibleDirectoryNodeRemoteImpl_Stub
    extends java.rmi.server.RemoteStub
    implements com.igeekinc.indelible.indeliblefs.remote.IndelibleDirectoryNodeRemote, com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote, com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote createChildDirectory(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, com.igeekinc.indelible.oid.IndelibleFSObjectID, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, com.igeekinc.util.FilePath, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, java.util.HashMap, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildLink(java.lang.String, com.igeekinc.indelible.oid.IndelibleFSObjectID)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote createChildSymlink(java.lang.String, java.lang.String, boolean)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChild(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChildDirectory(java.lang.String)"),
	new java.rmi.server.Operation("void deleteFork(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote getChildNode(java.lang.String)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo getChildNodeInfo(java.lang.String[])[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote getFork(java.lang.String, boolean)"),
	new java.rmi.server.Operation("java.util.Map getMetaDataResource(java.lang.String)"),
	new java.rmi.server.Operation("int getNumChildren()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote getObjectForVersion(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags)"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getObjectID()"),
	new java.rmi.server.Operation("int getReferenceCount()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersion getVersion()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.oid.IndelibleFSObjectID getVolumeID()"),
	new java.rmi.server.Operation("boolean isDirectory()"),
	new java.rmi.server.Operation("boolean isFile()"),
	new java.rmi.server.Operation("long lastModified()"),
	new java.rmi.server.Operation("long lengthWithChildren()"),
	new java.rmi.server.Operation("java.lang.String list()[]"),
	new java.rmi.server.Operation("java.lang.String listForkNames()[]"),
	new java.rmi.server.Operation("java.lang.String listMetaDataResources()[]"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator listVersions()"),
	new java.rmi.server.Operation("void release()"),
	new java.rmi.server.Operation("com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote setMetaDataResource(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("long totalLength()")
    };
    
    private static final long interfaceHash = 1346330604920155154L;
    
    // constructors
    public IndelibleDirectoryNodeRemoteImpl_Stub() {
	super();
    }
    public IndelibleDirectoryNodeRemoteImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of createChildDirectory(String)
    public com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote createChildDirectory(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateDirectoryInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildFile(String, IndelibleFSObjectID, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String $param_String_1, com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_2, boolean $param_boolean_3)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.NotFileException, com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_IndelibleFSObjectID_2);
		out.writeBoolean($param_boolean_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.NotFileException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildFile(String, FilePath, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String $param_String_1, com.igeekinc.util.FilePath $param_FilePath_2, boolean $param_boolean_3)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.NotFileException, com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_FilePath_2);
		out.writeBoolean($param_boolean_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.NotFileException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildFile(String, HashMap, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String $param_String_1, java.util.HashMap $param_HashMap_2, boolean $param_boolean_3)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_HashMap_2);
		out.writeBoolean($param_boolean_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildFile(String, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildFile(java.lang.String $param_String_1, boolean $param_boolean_2)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeBoolean($param_boolean_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildLink(String, IndelibleFSObjectID)
    public com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote createChildLink(java.lang.String $param_String_1, com.igeekinc.indelible.oid.IndelibleFSObjectID $param_IndelibleFSObjectID_2)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.NotFileException, com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_IndelibleFSObjectID_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.NotFileException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of createChildSymlink(String, String, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote createChildSymlink(java.lang.String $param_String_1, java.lang.String $param_String_2, boolean $param_boolean_3)
	throws com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException, com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_String_2);
		out.writeBoolean($param_boolean_3);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.CreateSymlinkInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.FileExistsException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteChild(String)
    public com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChild(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.CannotDeleteDirectoryException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.CannotDeleteDirectoryException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteChildDirectory(String)
    public com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote deleteChildDirectory(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.NotDirectoryException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.DeleteFileInfoRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.NotDirectoryException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteFork(String)
    public void deleteFork(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.ForkNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ForkNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getChildNode(String)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote getChildNode(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException, com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFileNodeRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ObjectNotFoundException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getChildNodeInfo(String[])
    public com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo[] getChildNodeInfo(java.lang.String[] $param_arrayOf_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_arrayOf_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.IndelibleNodeInfo[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFork(String, boolean)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote getFork(java.lang.String $param_String_1, boolean $param_boolean_2)
	throws com.igeekinc.indelible.indeliblefs.exceptions.ForkNotFoundException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeBoolean($param_boolean_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFSForkRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.ForkNotFoundException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getMetaDataResource(String)
    public java.util.Map getMetaDataResource(java.lang.String $param_String_1)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 13, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    java.util.Map $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getNumChildren()
    public int getNumChildren()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 14, interfaceHash);
	    ref.invoke(call);
	    int $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getObjectForVersion(IndelibleVersion, RetrieveVersionFlags)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote getObjectForVersion(com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $param_IndelibleVersion_1, com.igeekinc.indelible.indeliblefs.core.RetrieveVersionFlags $param_RetrieveVersionFlags_2)
	throws java.rmi.RemoteException, java.io.IOException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 15, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_IndelibleVersion_1);
		out.writeObject($param_RetrieveVersionFlags_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getObjectID()
    public com.igeekinc.indelible.oid.IndelibleFSObjectID getObjectID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 16, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getReferenceCount()
    public int getReferenceCount()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 17, interfaceHash);
	    ref.invoke(call);
	    int $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getVersion()
    public com.igeekinc.indelible.indeliblefs.core.IndelibleVersion getVersion()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 18, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersion $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersion) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getVolumeID()
    public com.igeekinc.indelible.oid.IndelibleFSObjectID getVolumeID()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 19, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.oid.IndelibleFSObjectID $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.oid.IndelibleFSObjectID) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of isDirectory()
    public boolean isDirectory()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 20, interfaceHash);
	    ref.invoke(call);
	    boolean $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of isFile()
    public boolean isFile()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 21, interfaceHash);
	    ref.invoke(call);
	    boolean $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of lastModified()
    public long lastModified()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 22, interfaceHash);
	    ref.invoke(call);
	    long $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of lengthWithChildren()
    public long lengthWithChildren()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 23, interfaceHash);
	    ref.invoke(call);
	    long $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of list()
    public java.lang.String[] list()
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 24, interfaceHash);
	    ref.invoke(call);
	    java.lang.String[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listForkNames()
    public java.lang.String[] listForkNames()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 25, interfaceHash);
	    ref.invoke(call);
	    java.lang.String[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listMetaDataResources()
    public java.lang.String[] listMetaDataResources()
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 26, interfaceHash);
	    ref.invoke(call);
	    java.lang.String[] $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listVersions()
    public com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator listVersions()
	throws java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 27, interfaceHash);
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.core.IndelibleVersionIterator) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of release()
    public void release()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 28, interfaceHash);
	    ref.invoke(call);
	    ref.done(call);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setMetaDataResource(String, Map)
    public com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote setMetaDataResource(java.lang.String $param_String_1, java.util.Map $param_Map_2)
	throws com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException, java.io.IOException, java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 29, interfaceHash);
	    try {
		java.io.ObjectOutput out = call.getOutputStream();
		out.writeObject($param_String_1);
		out.writeObject($param_Map_2);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling arguments", e);
	    }
	    ref.invoke(call);
	    com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = (com.igeekinc.indelible.indeliblefs.remote.IndelibleFSObjectRemote) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (com.igeekinc.indelible.indeliblefs.exceptions.PermissionDeniedException e) {
	    throw e;
	} catch (java.io.IOException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of totalLength()
    public long totalLength()
	throws java.rmi.RemoteException
    {
	try {
	    java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 30, interfaceHash);
	    ref.invoke(call);
	    long $result;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$result = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling return", e);
	    } finally {
		ref.done(call);
	    }
	    return $result;
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
